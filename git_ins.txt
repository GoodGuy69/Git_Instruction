

Architecture of git show: 

             (clone)                    
   -   -   -   -   -   -   -    -      remote repo
   |          (pull)                         ^
   |     -   -   -   -   -   -   -   -   -   |
   |     |                                   |   (push)
   v     V                                   |
working copy    ->    staging area    ->    local repo 



######## basic





git add .                    : add from "working copy" to "staging area"
git commit -m "description"  : commit from "staging area" to "local repo"
git push                     : push from "local repo" to "remote repo"

git pull                     : pull from "remote repo" to "working copy"

git rm filename              : remove from "working copy" and "staging area"
git rm --cached filename     : remove from "staging area" only
git rm -f filename           : remove force from both "working copy" and "staging area"

git status (-s)              : check for where code is 
git log  (--oneline)         : check all committed

######## Advanced

git branch                   : show list of branches and which branch we in
git branch branch_name       : create new branch

git checkout branch_name     : switch to "branch_name"
git checkout -b branch_name  : create branch_name and switch to "branch_name"
git merge branch_name        : merge branch_name into current branch(master) 

######## Hard 
git rebase branch_name       : take code of "branch_name" to current branch    ( if conflict -> "resolve and git add . "-> "git rebase --continue" 
                                                                                 if can instead skip commit -> "git rebase --skip" (not recommend)
                                                                                 if abort and get back the state before rebase ->  "git rebase --abort" )
Situation rebase many_commited branch, we must merge many commit to one, then rebase easy with 1 check conflict
-> git rebase -i HEAD~2      : show 2 commit from HEAD to modify -> after go to new page: pick commitID1 description1
                                                                                          pick commitID2 description2  -> modify "pick" into "s" (like "s commitID2 description2" )


git cherry-pick              :


######## Additional
git config --global -e                   : show "gitconfig" file
git config --global name1 name2          : put value of name1 = name2

echo 'alias ga="git add ." ' >> ~/.bash_profile   : setup simple button   (not running yet)

git push origin --delete <branch-name>                    : delete branch in remote repo
git branch -D <branch-name>                               : delete branch in local repo